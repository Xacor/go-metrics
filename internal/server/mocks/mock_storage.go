// Code generated by MockGen. DO NOT EDIT.
// Source: /home/xytrx/go-metrics/internal/server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	model "github.com/Xacor/go-metrics/internal/server/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStorage) All(ctx context.Context) ([]model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStorageMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStorage)(nil).All), ctx)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Create mocks base method.
func (m *MockStorage) Create(ctx context.Context, metric model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, metric)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, metric)
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, name string) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, name)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, metric model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, metric)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, metric)
}

// UpdateBatch mocks base method.
func (m *MockStorage) UpdateBatch(ctx context.Context, metrics []model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockStorageMockRecorder) UpdateBatch(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockStorage)(nil).UpdateBatch), ctx, metrics)
}

// MockMetricRepo is a mock of MetricRepo interface.
type MockMetricRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepoMockRecorder
}

// MockMetricRepoMockRecorder is the mock recorder for MockMetricRepo.
type MockMetricRepoMockRecorder struct {
	mock *MockMetricRepo
}

// NewMockMetricRepo creates a new mock instance.
func NewMockMetricRepo(ctrl *gomock.Controller) *MockMetricRepo {
	mock := &MockMetricRepo{ctrl: ctrl}
	mock.recorder = &MockMetricRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepo) EXPECT() *MockMetricRepoMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockMetricRepo) All(ctx context.Context) ([]model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockMetricRepoMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMetricRepo)(nil).All), ctx)
}

// Close mocks base method.
func (m *MockMetricRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricRepo)(nil).Close))
}

// Create mocks base method.
func (m *MockMetricRepo) Create(ctx context.Context, metric model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, metric)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMetricRepoMockRecorder) Create(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMetricRepo)(nil).Create), ctx, metric)
}

// Get mocks base method.
func (m *MockMetricRepo) Get(ctx context.Context, name string) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricRepoMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricRepo)(nil).Get), ctx, name)
}

// Update mocks base method.
func (m *MockMetricRepo) Update(ctx context.Context, metric model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, metric)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricRepoMockRecorder) Update(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricRepo)(nil).Update), ctx, metric)
}

// UpdateBatch mocks base method.
func (m *MockMetricRepo) UpdateBatch(ctx context.Context, metrics []model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockMetricRepoMockRecorder) UpdateBatch(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockMetricRepo)(nil).UpdateBatch), ctx, metrics)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), ctx)
}
